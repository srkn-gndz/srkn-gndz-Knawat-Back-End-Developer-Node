version: "3.9"

services:

  api:
    build:
      context: .
    image: api
    env_file: docker-compose.env
    environment:
      SERVICES: api
      PORT: 3000
    depends_on:
      - nats
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
      - "traefik.http.services.api-gw.loadbalancer.server.port=3000"
    networks:
      - internal

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.8
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    environment:
      node.name: elasticsearch
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: -Xms256m -Xmx256m
      discovery.type: single-node
      node.data : null
      network.host : 0.0.0.0
      discovery.seed_hosts : null
      cluster.initial_master_nodes : null
      ELASTIC_PASSWORD: changeme
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - data:/data/db
    networks:
      - internal

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:5.6.8
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200/"]'
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

  nats:
    image: nats:2
    networks:
      - internal
    
  redis:
    image: redis:alpine
    networks:
      - internal
    
  traefik:
    image: traefik:v2.1
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - 3000:80
      - 3001:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default

  users:
    restart: on-failure:3
    build:
      context: .
    image: users
    env_file: docker-compose.env
    environment:
      SERVICES: users
    depends_on:
      - elasticsearch
      - nats
      - redis
    networks:
      - internal

  products:
    restart: on-failure:3
    build:
      context: .
    image: products
    env_file: docker-compose.env
    environment:
      SERVICES: products
    depends_on:
      - elasticsearch
      - nats
      - redis
    networks:
      - internal

  cart:
    restart: on-failure:3
    build:
      context: .
    image: cart
    env_file: docker-compose.env
    environment:
      SERVICES: cart
    depends_on:
      - elasticsearch
      - nats
      - redis
    networks:
      - internal

networks:
  internal:

volumes:
  data:
